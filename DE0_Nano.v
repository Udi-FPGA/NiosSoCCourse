
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_Nano(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	G_SENSOR_CS_N,
	G_SENSOR_INT,
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

`define CLOCK
`define LED
`define KEY
`define SW
`define SDRAM
`define EPCS
`define AE
`define ADC
`define GPIOH
`define GPIO0
`define GPIO1


//////////// CLOCK //////////
//3.3-V LVTTL//
`ifdef CLOCK
input 		          		CLOCK_50;
`endif

//////////// LED //////////
//3.3-V LVTTL//
`ifdef LED
output		     [7:0]		LED;
`endif

//////////// KEY //////////
//3.3-V LVTTL//
`ifdef KEY
input 		     [1:0]		KEY;
`endif

//////////// SW //////////
//3.3-V LVTTL//
`ifdef SW
input 		     [3:0]		SW;
`endif

//////////// SDRAM //////////
//3.3-V LVTTL//
`ifdef SDRAM
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;
`endif

//////////// EPCS //////////
//3.3-V LVTTL//
`ifdef EPCS
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;
`endif

//////////// Accelerometer and EEPROM //////////
//3.3-V LVTTL//
`ifdef AE
output		          		G_SENSOR_CS_N;
input 		          		G_SENSOR_INT;
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;
`endif

//////////// ADC //////////
//3.3-V LVTTL//
`ifdef ADC
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;
`endif

//////////// 2x13 GPIO Header //////////
//3.3-V LVTTL//
`ifdef GPIOH
inout 		    [12:0]		GPIO_2;
input 		     [2:0]		GPIO_2_IN;
`endif

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
//3.3-V LVTTL//
`ifdef GPIO0
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;
`endif

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
//3.3-V LVTTL//
`ifdef GPIO1
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;
`endif

//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire         waitrequest;   // NiosSoC_inst_mm_bridge_0_m0_bfm:avs_waitrequest -> NiosSoC_inst:mm_bridge_0_m0_waitrequest
	wire  [31:0] readdata;      // NiosSoC_inst_mm_bridge_0_m0_bfm:avs_readdata -> NiosSoC_inst:mm_bridge_0_m0_readdata
	wire         debugaccess;   // NiosSoC_inst:mm_bridge_0_m0_debugaccess -> NiosSoC_inst_mm_bridge_0_m0_bfm:avs_debugaccess
	wire   [9:0] address;       // NiosSoC_inst:mm_bridge_0_m0_address -> NiosSoC_inst_mm_bridge_0_m0_bfm:avs_address
	wire         read;          // NiosSoC_inst:mm_bridge_0_m0_read -> NiosSoC_inst_mm_bridge_0_m0_bfm:avs_read
	wire   [3:0] byteenable;    // NiosSoC_inst:mm_bridge_0_m0_byteenable -> NiosSoC_inst_mm_bridge_0_m0_bfm:avs_byteenable
	wire         readdatavalid; // NiosSoC_inst_mm_bridge_0_m0_bfm:avs_readdatavalid -> NiosSoC_inst:mm_bridge_0_m0_readdatavalid
	wire  [31:0] writedata;     // NiosSoC_inst:mm_bridge_0_m0_writedata -> NiosSoC_inst_mm_bridge_0_m0_bfm:avs_writedata
	wire         write;         // NiosSoC_inst:mm_bridge_0_m0_write -> NiosSoC_inst_mm_bridge_0_m0_bfm:avs_write
	wire   [0:0] burstcount;    // NiosSoC_inst:mm_bridge_0_m0_burstcount -> NiosSoC_inst_mm_bridge_0_m0_bfm:avs_burstcount
	wire         clk = CLOCK_50;              // NiosSoC_inst_clk_bfm:clk -> [NiosSoC_inst:clk_clk, NiosSoC_inst_mm_bridge_0_m0_bfm:clk, NiosSoC_inst_reset_bfm:clk]
	wire         rstn = KEY[0];        // NiosSoC_inst_reset_bfm:reset -> [NiosSoC_inst:reset_reset_n, NiosSoC_inst_mm_bridge_0_m0_bfm:reset]


wire         Mwaitrequest;     // niosSoc_inst_mm_bridge_0_m0_bfm:avs_waitrequest -> niosSoc_inst:mm_bridge_0_m0_waitrequest
wire  [31:0] Mreaddata;        // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdata -> niosSoc_inst:mm_bridge_0_m0_readdata
wire         Mreaddatavalid;   // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdatavalid -> niosSoc_inst:mm_bridge_0_m0_readdatavalid

wire         Swaitrequest;     // niosSoc_inst_mm_bridge_0_m0_bfm:avs_waitrequest -> niosSoc_inst:mm_bridge_0_m0_waitrequest
wire  [31:0] Sreaddata;        // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdata -> niosSoc_inst:mm_bridge_0_m0_readdata
wire         Sreaddatavalid;   // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdatavalid -> niosSoc_inst:mm_bridge_0_m0_readdatavalid


wire MSCLK;
wire MMOSI;
wire MMISO;
wire MSS_n;

assign GPIO_0[0] = MSCLK;
assign GPIO_0[1] = MMOSI;
assign MMISO = GPIO_0[2];
assign GPIO_0[3] = MSS_n;

wire SSCLK;
wire SMOSI;
wire SMISO;
wire SSS_n;

assign SSCLK = GPIO_1[0];	
assign SMOSI = GPIO_1[1];	
assign GPIO_1[2] = SMISO;	
assign SSS_n = GPIO_1[3];	
//=======================================================
//  Structural coding
//=======================================================


	NiosSoC niossoc_inst (
		.clk_clk                      (clk),              //            clk.clk
		.mm_bridge_0_m0_waitrequest   (waitrequest),   // mm_bridge_0_m0.waitrequest
		.mm_bridge_0_m0_readdata      (readdata),      //               .readdata
		.mm_bridge_0_m0_readdatavalid (readdatavalid), //               .readdatavalid
		.mm_bridge_0_m0_burstcount    (burstcount),    //               .burstcount
		.mm_bridge_0_m0_writedata     (writedata),     //               .writedata
		.mm_bridge_0_m0_address       (address),       //               .address
		.mm_bridge_0_m0_write         (write),         //               .write
		.mm_bridge_0_m0_read          (read),          //               .read
		.mm_bridge_0_m0_byteenable    (byteenable),    //               .byteenable
		.mm_bridge_0_m0_debugaccess   (debugaccess),   //               .debugaccess
		.reset_reset_n                (rstn)         //          reset.reset_n
	);

assign waitrequest   = (address[9:6] == 4'h0) ? Mwaitrequest :
                       (address[9:6] == 4'h1) ? Swaitrequest : 1'b0;
							
assign readdata      = (address[9:6] == 4'h0) ? Mreaddata :
                       (address[9:6] == 4'h1) ? Sreaddata : 32'h00000000;

assign readdatavalid = (address[9:6] == 4'h0) ? Mreaddatavalid :
                       (address[9:6] == 4'h1) ? Sreaddatavalid : 1'b0;

							  
master master_inst
(
.clk (clk ),
.rstn(rstn),

.waitrequest  (Mwaitrequest  ),     // niosSoc_inst_mm_bridge_0_m0_bfm:avs_waitrequest -> niosSoc_inst:mm_bridge_0_m0_waitrequest
.readdata     (Mreaddata     ),        // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdata -> niosSoc_inst:mm_bridge_0_m0_readdata
.debugaccess  (debugaccess  ),     // niosSoc_inst:mm_bridge_0_m0_debugaccess -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_debugaccess
.address      (address[5:0] ),         // niosSoc_inst:mm_bridge_0_m0_address -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_address
.read         (read && (address[9:6] == 4'h0)),            // niosSoc_inst:mm_bridge_0_m0_read -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_read
.byteenable   (byteenable   ),      // niosSoc_inst:mm_bridge_0_m0_byteenable -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_byteenable
.readdatavalid(Mreaddatavalid),   // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdatavalid -> niosSoc_inst:mm_bridge_0_m0_readdatavalid
.writedata    (writedata    ),       // niosSoc_inst:mm_bridge_0_m0_writedata -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_writedata
.write        (write && (address[9:6] == 4'h0)),           // niosSoc_inst:mm_bridge_0_m0_write -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_write
.burstcount   (burstcount   ),      // niosSoc_inst:mm_bridge_0_m0_burstcount -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_burstcount

.SCLK(MSCLK),
.MOSI(MMOSI),
.MISO(MMISO),
.SS_n(MSS_n)
);	


slave slave_inst
(
.clk (clk ),
.rstn(rstn),

.waitrequest  (Swaitrequest  ),     // niosSoc_inst_mm_bridge_0_m0_bfm:avs_waitrequest -> niosSoc_inst:mm_bridge_0_m0_waitrequest
.readdata     (Sreaddata     ),        // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdata -> niosSoc_inst:mm_bridge_0_m0_readdata
.debugaccess  (debugaccess  ),     // niosSoc_inst:mm_bridge_0_m0_debugaccess -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_debugaccess
.address      (address[5:0] ),         // niosSoc_inst:mm_bridge_0_m0_address -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_address
.read         (read &&(address[9:6] == 4'h1)),            // niosSoc_inst:mm_bridge_0_m0_read -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_read
.byteenable   (byteenable   ),      // niosSoc_inst:mm_bridge_0_m0_byteenable -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_byteenable
.readdatavalid(Sreaddatavalid),   // niosSoc_inst_mm_bridge_0_m0_bfm:avs_readdatavalid -> niosSoc_inst:mm_bridge_0_m0_readdatavalid
.writedata    (writedata    ),       // niosSoc_inst:mm_bridge_0_m0_writedata -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_writedata
.write        (write &&(address[9:6] == 4'h1)),           // niosSoc_inst:mm_bridge_0_m0_write -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_write
.burstcount   (burstcount   ),      // niosSoc_inst:mm_bridge_0_m0_burstcount -> niosSoc_inst_mm_bridge_0_m0_bfm:avs_burstcount

.SCLK(SSCLK),
.MOSI(SMOSI),
.MISO(SMISO),
.SS_n(SSS_n)
);	
	

endmodule
